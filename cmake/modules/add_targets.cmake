cmake_minimum_required(VERSION 3.20)

function(add_targets)
    cmake_parse_arguments("arg" "SCAN_SINGLE_FILE;SCAN_PROJECTS" "SUBDIR;TARGET_PREFIX;SSF_PATTERN;SSF_ADD_COMMAND" "" ${ARGN})
    if(arg_SCAN_SINGLE_FILE)
        glob_files(src_list SCAN_PATTERN ${arg_SSF_PATTERN} SUBDIR ${arg_SUBDIR})
        if(arg_SUBDIR)
            string(APPEND arg_SUBDIR "/")
        endif()
        foreach(v ${src_list})
            set(target_name ${v})
            string(REGEX REPLACE "/" "." target_name ${target_name})
            if(arg_SSF_ADD_COMMAND)
                cmake_language(CALL ${arg_SSF_ADD_COMMAND} ${arg_TARGET_PREFIX}${target_name} "${arg_SUBDIR}${v}")
            else()
                add_executable(${arg_TARGET_PREFIX}${target_name} "${arg_SUBDIR}${v}")
            endif()
        endforeach()
    elseif(arg_SCAN_PROJECTS)
        glob_files(src_list SCAN_PATTERN "CMakeLists.txt" SUBDIR ${arg_SUBDIR})
        foreach(v ${src_list})
            list(FILTER dir_list EXCLUDE REGEX "^${v}")
            cmake_path(GET v PARENT_PATH _target_name)
            set(dir_to_add "${arg_SUBDIR}/${_target_name}")
            string(REGEX REPLACE "/" "." _target_name ${_target_name})
            set(_target_name "${arg_TARGET_PREFIX}${_target_name}.project")
            add_subdirectory(${dir_to_add})
        endforeach()
    else()
        message(FATAL_ERROR "Scan type not assigned!")
    endif()
endfunction()

function(glob_files return_value)
    cmake_parse_arguments("arg" "" "SCAN_PATTERN;SUBDIR" "" ${ARGN})
    set(scan_path "${CMAKE_CURRENT_LIST_DIR}")
    if(arg_SUBDIR)
        cmake_path(APPEND scan_path ${arg_SUBDIR})
    endif()
    file(GLOB_RECURSE glob_list LIST_DIRECTORIES false RELATIVE "${scan_path}" "${scan_path}/${arg_SCAN_PATTERN}")
    set(${return_value} ${glob_list} PARENT_SCOPE)
endfunction()